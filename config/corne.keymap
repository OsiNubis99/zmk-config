/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>

&spi1 {
    compatible = "nordic,nrf-spim";

    /* Cannot be used together with i2c0. */

    status = "okay";
    mosi-pin = <6>;

    // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.

    sck-pin = <5>;
    miso-pin = <7>;

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "SK6812mini";

        /* SPI */

        reg = <0>;/* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <27>;/* There are per-key RGB, but the first 6 are underglow */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen {
        zmk,underglow = &led_strip;
    };
};

&mt {
    tapping-term-ms = <400>;
};

/ {
    macros {
        paste: paste {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp INSERT>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;
        };
        copy: copy {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp RCTRL>;
        };
        cut: cut {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp RCTRL>;
        };
        undo: undo {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp RCTRL>;
        };
        redo: redo {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp RCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &sk LCTRL  &kp APOSTROPHE  &kp COMMA       &kp DOT   &kp P      &kp Y     &kp F   &kp H          &kp K   &kp J     &kp L   &sk LALT
    &kp TAB           &kp I      &kp O         &kp E   &kp A      &kp U     &kp D   &kp R          &kp T   &kp N     &kp S    &kp DEL
 &lt 4 BSLH           &kp Z      &kp Q         &kp G   &kp C      &kp X     &kp B   &kp V          &kp W   &kp M  &kp SEMI  &kp SLASH
                                        &mt LGUI ESC   &mo 2  &kp SPACE  &kp BSPC   &mo 3  &mt LSHFT RET
            >;
        };

        layer_gaming {
            bindings = <
 &kp ESC   &kp Q   &kp W   &kp E   &kp R      &kp T     &kp Y   &kp U       &kp I    &kp O     &kp P    &kp DEL
 &kp TAB   &kp A   &kp S   &kp D   &kp F      &kp G     &kp H   &kp J       &kp K    &kp L  &kp SEMI   &sk LALT
 &lt 4 M   &kp Z   &kp X   &kp C   &kp V      &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp SLASH
                          &kp N2   &mo 2  &kp SPACE  &kp BSPC   &mo 3  &kp RETURN
            >;
        };

        layer_numbers {
            bindings = <
 &trans   &kp EXCL     &kp AT   &kp HASH   &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
 &trans     &kp N1     &kp N2     &kp N3     &kp N4     &kp N5     &kp N6    &kp N7           &kp N8    &kp N9    &kp N0  &trans
 &trans  &kp EQUAL  &kp GRAVE  &kp TILDE  &kp UNDER  &kp MINUS   &kp PLUS  &kp LBKT         &kp LBRC  &kp RBRC  &kp RBKT  &trans
                                  &trans     &trans     &trans     &trans  &kp LGUI           &trans
            >;
        };

        LAYER_MOVE {
            bindings = <
 &trans     &none      &none      &none    &paste   &copy  &kp PSCRN     &redo   &none     &none      &none   &trans
 &trans  &kp HOME  &kp PG_DN  &kp PG_UP   &kp END   &undo       &cut  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT   &trans
 &kp F1    &kp F2     &kp F3     &kp F4    &kp F5  &kp F6     &kp F7    &kp F8  &kp F9   &kp F10    &kp F11  &kp F12
                                 &trans  &kp LGUI  &trans     &trans    &trans  &trans
            >;
        };

        layer_settings {
            bindings = <
    &out OUT_TOG  &rgb_ug RGB_HUI   &none  &bt BT_NXT  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI         &none    &kp C_PREV          &kp C_PP    &kp C_STOP    &kp C_NEXT   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_HUD   &none  &bt BT_CLR     &kp C_BRI_DN     &kp C_BRI_UP         &none    &kp K_PREV  &kp K_PLAY_PAUSE    &kp K_STOP    &kp K_NEXT   &none
          &trans  &rgb_ug RGB_EFF   &none  &bt BT_PRV     &kp C_VOL_DN     &kp C_VOL_UP  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
                                               &tog 1     &bt BT_SEL 0     &bt BT_SEL 1         &none         &none             &none
            >;
        };
    };
};
